@import play.routes.compiler._
@import play.routes.compiler.templates._
@import InjectedRoutesGenerator.Dependency

@(sourceInfo: RoutesSourceInfo, pkg: Option[String], imports: Seq[String],
  deps: Seq[Dependency[Rule]], rules: Seq[Dependency[Rule]], includes: Seq[Dependency[Include]])
// @@GENERATOR:play-routes-compiler
// @@SOURCE:@sourceInfo.source

@for(p <- pkg) {package @p}

import play.core.routing._

import play.api.mvc._
@for(i <- imports) {
import @if(!i.startsWith("_root_.")){_root_.}@i}

final class Routes(
  override val errorHandler: play.api.http.HttpErrorHandler, @for(dep <- deps){
  @markLines(dep.rule)
  @dep.ident: @dep.clazz,}
) extends GeneratedRouter @ob

  final val prefix: String = "/"
  def withPrefix(addPrefix: String): Routes = ???

@for((dep, index) <- rules.zipWithIndex){@dep.rule match {
case route @ Route(verb, path, call, comments, modifiers) => {
  @markLines(route)
  private[this] lazy val @routeIdentifier(route, index) = Route("@verb.value",
    PathPattern(List(@path.parts.map(_.toString).mkString(", ")))
  )
}
case include @ Include(path, router) => {
  @markLines(include)
  private[this] val prefixed_@(dep.ident)_@(index) = Include(@(dep.ident))
}}}

  def routes: PartialFunction[RequestHeader, Handler] = @ob
  @if(rules.isEmpty) {
    Map.empty
  } else {@for((dep, index) <- rules.zipWithIndex){@dep.rule match {
  case include: Include => {
    @markLines(include)
    case prefixed_@(dep.ident)_@(index)(handler) => handler
  }
  case route: Route => {
    @markLines(route)
    case @(routeIdentifier(route, index))(params@@_) =>
    named("@(route.call.controller).@(route.call.method)") @ob
      call@(routeBinding(route)) @ob @localNames(route)
          @injectedControllerMethodCall(route, dep.ident, x => safeKeyword(x.nameClean))
      @cb
    @cb
  }
  }}}@cb
@cb
